/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Usuarios;
import controlador.MetodosAdministrador;
import controlador.MetodosHistorial;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import modelo.Vehiculos;
import modelo.Historial;

/**
 *
 * @author Javier SÃ¡nchez Gonzalez
 */
public class Administrador extends javax.swing.JPanel {

    /**
     * Variables historial
     */
    private Usuarios usuarios;
    private MetodosAdministrador metodosAdministrador;
    private InicioSesion inicioSesion;
    private Vehiculos vehiculos;

    /**
     * Creates new form RegistroCuenta
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /**
     * Creates new form RegistroCuenta
     */
    public Administrador(Usuarios usuario) {

        initComponents();
        metodosAdministrador = new MetodosAdministrador();

        // Poner jTexfield y jBotton el radio
        jbmostrarDatosUsuarios.putClientProperty("FlatLaf.style", "arc: 15");
        jbcancelar.putClientProperty("FlatLaf.style", "arc: 15");
        // jlhistorial.putClientProperty("FlatLaf.styleClass", "h2");
        jlhistorial.putClientProperty("Flatlaf.styleClass", "");
        jltitulo2.putClientProperty("FlatLaf.styleClass", "h0");

    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgeleccion = new javax.swing.ButtonGroup();
        panelAdministrador = new vista.PanelRound();
        jlhistorial = new javax.swing.JLabel();
        jbmostrarDatosUsuarios = new javax.swing.JButton();
        jbcancelar = new javax.swing.JButton();
        jltitulo2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabla = new javax.swing.JTable();
        jbmostrarHistorialReservas = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtabla1 = new javax.swing.JTable();

        setMaximumSize(null);
        setPreferredSize(new java.awt.Dimension(428, 800));

        panelAdministrador.setBackground(new java.awt.Color(249, 251, 255));
        panelAdministrador.setMaximumSize(null);
        panelAdministrador.setPreferredSize(new java.awt.Dimension(428, 800));
        panelAdministrador.setRoundBottomLeft(30);
        panelAdministrador.setRoundBottomRight(30);

        jlhistorial.setFont(new java.awt.Font("Stencil", 0, 20)); // NOI18N
        jlhistorial.setForeground(new java.awt.Color(39, 59, 244));
        jlhistorial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlhistorial.setText("HISTORIAL APARCAMIENTO");
        jlhistorial.setPreferredSize(new java.awt.Dimension(273, 30));

        jbmostrarDatosUsuarios.setBackground(new java.awt.Color(43, 220, 61));
        jbmostrarDatosUsuarios.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jbmostrarDatosUsuarios.setForeground(new java.awt.Color(255, 255, 255));
        jbmostrarDatosUsuarios.setText("Mostrar usuarios");
        jbmostrarDatosUsuarios.setToolTipText("Muestra el historial por nombre o por matricula");
        jbmostrarDatosUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbmostrarDatosUsuarios.setPreferredSize(new java.awt.Dimension(124, 49));
        jbmostrarDatosUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmostrarDatosUsuariosActionPerformed(evt);
            }
        });

        jbcancelar.setBackground(new java.awt.Color(43, 220, 61));
        jbcancelar.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jbcancelar.setForeground(new java.awt.Color(255, 255, 255));
        jbcancelar.setText("Mostrar Aparcamiento");
        jbcancelar.setToolTipText("Boton cancela operacion y regresa a la pantalla anterior");
        jbcancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbcancelar.setPreferredSize(new java.awt.Dimension(124, 49));
        jbcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbcancelarActionPerformed(evt);
            }
        });

        jltitulo2.setFont(new java.awt.Font("Lucida Sans", 0, 20)); // NOI18N
        jltitulo2.setForeground(new java.awt.Color(25, 35, 66));
        jltitulo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jltitulo2.setText("Administrador");
        jltitulo2.setPreferredSize(new java.awt.Dimension(273, 30));

        jtabla.setBackground(new java.awt.Color(198, 212, 255));
        jtabla.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        jtabla.setForeground(new java.awt.Color(0, 0, 0));
        jtabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtabla);

        jbmostrarHistorialReservas.setBackground(new java.awt.Color(43, 220, 61));
        jbmostrarHistorialReservas.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jbmostrarHistorialReservas.setForeground(new java.awt.Color(255, 255, 255));
        jbmostrarHistorialReservas.setText("Historial reservas");
        jbmostrarHistorialReservas.setToolTipText("Muestra el historial por nombre o por matricula");
        jbmostrarHistorialReservas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbmostrarHistorialReservas.setPreferredSize(new java.awt.Dimension(124, 49));
        jbmostrarHistorialReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmostrarHistorialReservasActionPerformed(evt);
            }
        });

        jtabla1.setBackground(new java.awt.Color(198, 212, 255));
        jtabla1.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        jtabla1.setForeground(new java.awt.Color(0, 0, 0));
        jtabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtabla1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtabla1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtabla1);

        javax.swing.GroupLayout panelAdministradorLayout = new javax.swing.GroupLayout(panelAdministrador);
        panelAdministrador.setLayout(panelAdministradorLayout);
        panelAdministradorLayout.setHorizontalGroup(
            panelAdministradorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdministradorLayout.createSequentialGroup()
                .addGroup(panelAdministradorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAdministradorLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jlhistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAdministradorLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(panelAdministradorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelAdministradorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jbcancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                                .addComponent(jbmostrarDatosUsuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbmostrarHistorialReservas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAdministradorLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jltitulo2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        panelAdministradorLayout.setVerticalGroup(
            panelAdministradorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdministradorLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jlhistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jltitulo2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbmostrarDatosUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbmostrarHistorialReservas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbcancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAdministrador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAdministrador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     *
     * @param evt Metodo buscarMatricula var matricula = se pasa al metodo y nos
     * devuelve un arrayList del historial
     */

    private void jbmostrarDatosUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmostrarDatosUsuariosActionPerformed
        // Llamar al mÃ©todo para obtener la lista de usuarios
        List<Usuarios> usuarios = MetodosAdministrador.buscarUsuarios();

        // Obtener el modelo de la tabla y limpiar las filas antes de aÃ±adir nuevos datos
        DefaultTableModel model = (DefaultTableModel) jtabla1.getModel();
        model.setRowCount(0); // Limpiar la tabla

        // TÃ­tulos de las columnas para los usuarios (solo es necesario si no se establecen en el diseÃ±o de la tabla)
        String[] columnTitles = {"ID", "Nombre", "Apellidos", "Email"};
        model.setColumnIdentifiers(columnTitles); // Establecer tÃ­tulos de columnas

        // Verificar si la lista de usuarios no estÃ¡ vacÃ­a
        if (!usuarios.isEmpty()) {
            // Agregar los datos de los usuarios a la tabla
            for (Usuarios usu : usuarios) {
                model.addRow(new Object[]{
                    usu.getId(),
                    usu.getNombre(),
                    usu.getApellidos(),
                    usu.getEmail()
                });
            }
        } else {
            // Mostrar mensaje si no hay registros
            JOptionPane.showMessageDialog(null, "No hay registros de usuarios.", "Usuarios", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jbmostrarDatosUsuariosActionPerformed

    /**
     * Evento si al introducir los datos son erroneos, al cancelar vuelven a
     * incilizarse los campos
     */
    private void jbcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbcancelarActionPerformed

        int confirmar = JOptionPane.showConfirmDialog(this, "Â¿EstÃ¡s seguro de que deseas cerrar la sesiÃ³n?", "Cerrar sesiÃ³n", JOptionPane.YES_NO_OPTION);

        if (confirmar == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }//GEN-LAST:event_jbcancelarActionPerformed

    private void jbmostrarHistorialReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmostrarHistorialReservasActionPerformed
        // Obtener la lista de reservas desde MetodosHistorial

        List<Historial> historia = MetodosHistorial.mostrarHistorial();

        // Limpiar la tabla antes de aÃ±adir nuevos datos
        DefaultTableModel model = (DefaultTableModel) jtabla.getModel();
        model.setRowCount(0); // Limpiar la tabla

        if (!historia.isEmpty()) {
            // TÃ­tulos de las columnas para el historial
            String[] columnTitles = {"DÃ­a", "DuraciÃ³n", "Precio", "MatrÃ­cula"};
            model.setColumnIdentifiers(columnTitles); // Establecer tÃ­tulos de columnas

            for (modelo.Historial his : historia) {
                Double precio = his.getPrecio() != null ? his.getPrecio() : 0.0;
                model.addRow(new Object[]{his.getDia(), his.getTiempoReservado(), precio, his.getMatricula()});

            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay registros en el historial.", "Historial", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbmostrarHistorialReservasActionPerformed

    private void jtabla1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtabla1MouseClicked
        int selectedRow = jtabla1.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (selectedRow >= 0) {
            // Obtener el ID del usuario desde la tabla
            int idUsuario = (int) jtabla1.getValueAt(selectedRow, 0);
            String nombreUsuario = (String) jtabla1.getValueAt(selectedRow, 1);

            // Mostrar mensaje de confirmaciÃ³n
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Â¿Desea eliminar al usuario " + nombreUsuario + " con ID " + idUsuario + "?",
                    "Confirmar eliminaciÃ³n", JOptionPane.YES_NO_OPTION);

            // Si el usuario confirma, eliminar el registro
            if (confirm == JOptionPane.YES_OPTION) {
                boolean eliminado = metodosAdministrador.eliminarUsuario(idUsuario);

                if (eliminado) {
                    JOptionPane.showMessageDialog(null,
                            "Usuario eliminado correctamente.",
                            "EliminaciÃ³n exitosa", JOptionPane.INFORMATION_MESSAGE);

                    // Actualizar la tabla despuÃ©s de la eliminaciÃ³n
                    DefaultTableModel model = (DefaultTableModel) jtabla1.getModel();
                    model.removeRow(selectedRow);
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Error al eliminar el usuario.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }


    }//GEN-LAST:event_jtabla1MouseClicked

    /**
     * Metodo se le pasa el panel InicioSesion para que se muestre
     *
     * @param panel
     */
    private void mostrarPanel(InicioCuenta panel) {
        panel.setSize(428, 800);
        panel.setLocation(0, 0);

        panelAdministrador.removeAll();
        panelAdministrador.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        panelAdministrador.revalidate();
        panelAdministrador.repaint();

    }
    /**
     * Metodo crean la variables para que al leer el archivo de texto traducido
     * lo identifique
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgeleccion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbcancelar;
    private javax.swing.JButton jbmostrarDatosUsuarios;
    private javax.swing.JButton jbmostrarHistorialReservas;
    private javax.swing.JLabel jlhistorial;
    private javax.swing.JLabel jltitulo2;
    private javax.swing.JTable jtabla;
    private javax.swing.JTable jtabla1;
    private vista.PanelRound panelAdministrador;
    // End of variables declaration//GEN-END:variables

}
